#!/usr/bin/env python3
"""
Script pour r√©initialiser compl√®tement la base de donn√©es AppGET
Usage: python reset_database.py
"""

import os
import sys
import shutil
import django
from pathlib import Path

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appget.settings')
django.setup()

from django.core.management import execute_from_command_line
from django.conf import settings
from django.db import connection
import subprocess

def print_step(step, message):
    """Afficher une √©tape avec style"""
    print(f"\n{'='*50}")
    print(f"√âTAPE {step}: {message}")
    print(f"{'='*50}")

def remove_sqlite_db():
    """Supprimer la base SQLite si elle existe"""
    db_file = Path("db.sqlite3")
    if db_file.exists():
        db_file.unlink()
        print("‚úÖ Base de donn√©es SQLite supprim√©e")
    else:
        print("‚ÑπÔ∏è  Aucune base SQLite trouv√©e")

def clean_migrations():
    """Supprimer tous les fichiers de migration sauf __init__.py"""
    print("üßπ Nettoyage des migrations...")
    
    # Trouver tous les dossiers migrations
    migration_dirs = []
    for root, dirs, files in os.walk('.'):
        if 'migrations' in dirs:
            migration_path = os.path.join(root, 'migrations')
            migration_dirs.append(migration_path)
    
    # Nettoyer chaque dossier migrations
    for migration_dir in migration_dirs:
        if os.path.exists(migration_dir):
            for file in os.listdir(migration_dir):
                if file.endswith('.py') and file != '__init__.py':
                    file_path = os.path.join(migration_dir, file)
                    os.remove(file_path)
                    print(f"  ‚ùå {file_path}")
                elif file.endswith('.pyc'):
                    file_path = os.path.join(migration_dir, file)
                    os.remove(file_path)
    
    print("‚úÖ Migrations nettoy√©es")

def create_migrations():
    """Cr√©er les nouvelles migrations"""
    print("üìù Cr√©ation des nouvelles migrations...")
    try:
        execute_from_command_line(['manage.py', 'makemigrations'])
        print("‚úÖ Migrations cr√©√©es avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des migrations: {e}")
        return False
    return True

def apply_migrations():
    """Appliquer les migrations"""
    print("üóÉÔ∏è  Application des migrations...")
    try:
        execute_from_command_line(['manage.py', 'migrate'])
        print("‚úÖ Migrations appliqu√©es avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'application des migrations: {e}")
        return False
    return True

def create_superuser():
    """Cr√©er un superutilisateur"""
    print("üë§ Cr√©ation d'un superutilisateur...")
    print("Veuillez entrer les informations pour le superutilisateur:")
    
    try:
        execute_from_command_line(['manage.py', 'createsuperuser'])
        print("‚úÖ Superutilisateur cr√©√© avec succ√®s")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Cr√©ation du superutilisateur annul√©e")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du superutilisateur: {e}")

def load_sample_data():
    """Charger des donn√©es d'exemple"""
    choice = input("\nüéØ Voulez-vous charger des donn√©es d'exemple? (y/n): ").lower()
    
    if choice == 'y':
        print("üìä Chargement des donn√©es d'exemple...")
        try:
            # Cr√©er le fichier de fixtures s'il n'existe pas
            create_sample_fixtures()
            execute_from_command_line(['manage.py', 'loaddata', 'sample_data.json'])
            print("‚úÖ Donn√©es d'exemple charg√©es")
        except Exception as e:
            print(f"‚ö†Ô∏è  Impossible de charger les donn√©es d'exemple: {e}")

def create_sample_fixtures():
    """Cr√©er des fixtures d'exemple"""
    fixtures_content = '''[
    {
        "model": "core.department",
        "pk": 1,
        "fields": {
            "name": "Informatique",
            "code": "INFO",
            "description": "D√©partement d'Informatique et Sciences du Num√©rique",
            "is_active": true
        }
    },
    {
        "model": "core.department", 
        "pk": 2,
        "fields": {
            "name": "Math√©matiques",
            "code": "MATH",
            "description": "D√©partement de Math√©matiques",
            "is_active": true
        }
    },
    {
        "model": "core.program",
        "pk": 1,
        "fields": {
            "name": "Licence Informatique",
            "code": "L-INFO",
            "level": "L3",
            "duration_years": 3,
            "max_students": 50,
            "department": 1,
            "is_active": true
        }
    },
    {
        "model": "core.room",
        "pk": 1,
        "fields": {
            "name": "Amphi A",
            "code": "AMPH-A",
            "room_type": "amphitheater",
            "capacity": 200,
            "building": "B√¢timent Principal",
            "floor": "RDC",
            "equipment": "Projecteur, Micro, Climatisation",
            "department": 1,
            "is_available": true
        }
    },
    {
        "model": "core.timeslot",
        "pk": 1,
        "fields": {
            "day_of_week": 0,
            "start_time": "08:00:00",
            "end_time": "09:30:00", 
            "duration_minutes": 90,
            "is_active": true
        }
    },
    {
        "model": "core.timeslot",
        "pk": 2,
        "fields": {
            "day_of_week": 0,
            "start_time": "10:00:00",
            "end_time": "11:30:00",
            "duration_minutes": 90,
            "is_active": true
        }
    }
]'''
    
    with open('sample_data.json', 'w', encoding='utf-8') as f:
        f.write(fixtures_content)

def main():
    """Fonction principale"""
    print("üöÄ R√âINITIALISATION DE LA BASE DE DONN√âES APPGET")
    print("=" * 50)
    
    # Confirmation
    confirmation = input("‚ö†Ô∏è  ATTENTION: Cette op√©ration va SUPPRIMER toutes les donn√©es existantes!\n√ätes-vous s√ªr de vouloir continuer? (tapez 'OUI' pour confirmer): ")
    
    if confirmation != 'OUI':
        print("‚ùå Op√©ration annul√©e")
        return
    
    try:
        # √âtape 1: Supprimer l'ancienne base
        print_step(1, "Suppression de l'ancienne base de donn√©es")
        remove_sqlite_db()
        
        # √âtape 2: Nettoyer les migrations
        print_step(2, "Nettoyage des migrations")
        clean_migrations()
        
        # √âtape 3: Cr√©er les nouvelles migrations
        print_step(3, "Cr√©ation des nouvelles migrations")
        if not create_migrations():
            return
        
        # √âtape 4: Appliquer les migrations
        print_step(4, "Application des migrations")
        if not apply_migrations():
            return
        
        # √âtape 5: Cr√©er un superutilisateur
        print_step(5, "Cr√©ation du superutilisateur")
        create_superuser()
        
        # √âtape 6: Donn√©es d'exemple (optionnel)
        print_step(6, "Donn√©es d'exemple (optionnel)")
        load_sample_data()
        
        print("\n" + "=" * 50)
        print("üéâ R√âINITIALISATION TERMIN√âE AVEC SUCC√àS!")
        print("=" * 50)
        print("‚úÖ Nouvelle base de donn√©es cr√©√©e")
        print("‚úÖ Tables cr√©√©es selon la nouvelle structure")
        print("‚úÖ Pr√™t √† d√©marrer l'application")
        print("\nPour d√©marrer le serveur:")
        print("  python manage.py runserver")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR FATALE: {e}")
        print("üí° V√©rifiez que Django est bien install√© et configur√©")

if __name__ == "__main__":
    main()
