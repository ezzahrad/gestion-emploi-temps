# test_db_connection.py - Tester la connexion √† PostgreSQL
import os
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'schedule_management.settings')
django.setup()

from django.db import connection
from django.core.management.color import no_style

def test_database_connection():
    """Tester la connexion √† la base de donn√©es"""
    print("üîç Test de connexion √† la base de donn√©es...")
    print(f"Base: {settings.DATABASES['default']['NAME']}")
    print(f"Utilisateur: {settings.DATABASES['default']['USER']}")
    print(f"Host: {settings.DATABASES['default']['HOST']}")
    print(f"Port: {settings.DATABASES['default']['PORT']}")
    
    try:
        # Tenter une connexion
        with connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"‚úÖ Connexion r√©ussie!")
            print(f"Version PostgreSQL: {version[0]}")
            
            # Tester les permissions
            cursor.execute("SELECT current_user, current_database();")
            user_db = cursor.fetchone()
            print(f"Utilisateur connect√©: {user_db[0]}")
            print(f"Base de donn√©es: {user_db[1]}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_database_permissions():
    """Tester les permissions de cr√©ation de table"""
    print("\nüîß Test des permissions...")
    
    try:
        with connection.cursor() as cursor:
            # Tester la cr√©ation d'une table de test
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS test_permissions (
                    id SERIAL PRIMARY KEY,
                    test_field VARCHAR(50)
                );
            """)
            print("‚úÖ Permission CREATE TABLE: OK")
            
            # Tester l'insertion
            cursor.execute("INSERT INTO test_permissions (test_field) VALUES ('test');")
            print("‚úÖ Permission INSERT: OK")
            
            # Tester la s√©lection
            cursor.execute("SELECT * FROM test_permissions;")
            result = cursor.fetchall()
            print("‚úÖ Permission SELECT: OK")
            
            # Nettoyer
            cursor.execute("DROP TABLE test_permissions;")
            print("‚úÖ Permission DROP TABLE: OK")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur de permissions: {e}")
        return False

if __name__ == "__main__":
    print("=" * 50)
    print("TEST DE CONNEXION DATABASE APPGET")
    print("=" * 50)
    
    if test_database_connection():
        test_database_permissions()
        print("\nüéâ Tous les tests sont pass√©s!")
        print("Vous pouvez maintenant ex√©cuter: python manage.py migrate")
    else:
        print("\n‚ùå Probl√®me de connexion d√©tect√©")
        print("V√©rifiez la configuration de la base de donn√©es")
