#!/bin/bash
set -e

echo "üöÄ D√©marrage AppGET - Nouvelles Fonctionnalit√©s"

# Attendre que la base de donn√©es soit disponible
echo "‚è≥ Attente de la base de donn√©es..."
while ! nc -z db 5432; do
  sleep 0.1
done
echo "‚úÖ Base de donn√©es accessible"

# Attendre que Redis soit disponible
echo "‚è≥ Attente de Redis..."
while ! nc -z redis 6379; do
  sleep 0.1
done
echo "‚úÖ Redis accessible"

# Ex√©cuter les migrations
echo "üîß Application des migrations..."
python manage.py makemigrations
python manage.py makemigrations notifications
python manage.py makemigrations grades
python manage.py makemigrations absences
python manage.py makemigrations pdf_export
python manage.py migrate

# Cr√©er un superutilisateur si n√©cessaire
echo "üë§ Cr√©ation du superutilisateur..."
python -c "
import django
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'schedule_management.settings')
django.setup()
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(is_superuser=True).exists():
    User.objects.create_superuser(
        username='admin',
        email='admin@appget.docker',
        password='admin123',
        first_name='Admin',
        last_name='Docker'
    )
    print('‚úÖ Superutilisateur cr√©√© (admin/admin123)')
else:
    print('‚úÖ Superutilisateur existant')
"

# Cr√©er les donn√©es de base
echo "üìä Cr√©ation des donn√©es de base..."
python -c "
import django
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'schedule_management.settings')
django.setup()

# √âchelle de notation
try:
    from grades.models import GradeScale
    if not GradeScale.objects.filter(is_default=True).exists():
        GradeScale.objects.create(
            name='√âchelle Fran√ßaise',
            is_default=True,
            a_plus_min=18.0,
            a_min=16.0,
            b_plus_min=14.0,
            b_min=12.0,
            c_plus_min=10.0,
            c_min=8.0,
            d_plus_min=6.0,
            d_min=4.0
        )
        print('‚úÖ √âchelle de notation cr√©√©e')
except ImportError:
    print('‚ö†Ô∏è  Module grades non disponible')

# Politique d'absence
try:
    from absences.models import AbsencePolicy
    if not AbsencePolicy.objects.filter(is_default=True).exists():
        AbsencePolicy.objects.create(
            name='Politique Standard Docker',
            is_default=True,
            max_unjustified_absences=3,
            max_total_absences_percentage=25.0,
            justification_deadline_hours=48,
            makeup_request_deadline_days=7
        )
        print('‚úÖ Politique d'\''absence cr√©√©e')
except ImportError:
    print('‚ö†Ô∏è  Module absences non disponible')

# Param√®tres PDF
try:
    from pdf_export.models import PDFExportSettings
    if not PDFExportSettings.objects.exists():
        PDFExportSettings.objects.create(
            output_directory='pdf_exports/',
            temp_directory='pdf_temp/',
            max_file_size_mb=50,
            max_pages_per_document=500,
            max_concurrent_jobs=5,
            job_retention_days=7,
            image_quality=85,
            compression_level=6
        )
        print('‚úÖ Param√®tres PDF cr√©√©s')
except ImportError:
    print('‚ö†Ô∏è  Module pdf_export non disponible')
"

# Collecter les fichiers statiques
echo "üìÅ Collection des fichiers statiques..."
python manage.py collectstatic --noinput

echo "üéâ Initialisation termin√©e !"

# Ex√©cuter la commande pass√©e en argument
exec "$@"
